
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORnonassocLOWERHIGHERHEQUALLEQUALNEQUALSAMEASDIFFERleftSUMSUBleftMULTIPLYDIVIDERESTOFAND BOOL COLON COMMA DECLARATION DEFINITION DIFFER DIVIDE ELSE EQUALS FALSE FLOAT FLOATTYPE HEQUAL HIGHER IF INT LBRACK LCURLY LEQUAL LOWER LPAR MULTIPLY NAME NEQUAL NUMBER OR QMARK RBRACK RCURLY RESTOF RETURN RPAR SAMEAS SEMICOLON STRING STRINGTYPE SUB SUM TRUE VOID WHILEprogram : DECLARATION declaration\n               | DEFINITION definition\n               | DECLARATION declaration program\n               | DEFINITION definition programtypes :    INT \n                | FLOATTYPE \n                | BOOL \n                | STRINGTYPEdeclaration : NAME LPAR dargument RPAR COLON types\n                    | NAME LPAR dargument RPAR COLON VOID \n                    | NAME LPAR RPAR COLON types \n                    | NAME LPAR RPAR COLON VOID definition : NAME LPAR dargument RPAR COLON types block\n                    | NAME LPAR RPAR COLON types block\n                    | NAME LPAR RPAR COLON VOID block\n                    | NAME LPAR dargument RPAR COLON VOID block dargument :   NAME COLON types\n                  | NAME COLON types COMMA dargument block : LCURLY RCURLY\n            | LCURLY block_content RCURLYblock_content : statement  \n                    | statement block_content statement : RETURN SEMICOLON \n                | RETURN expression SEMICOLONstatement : IF expression block\n                | IF expression block ELSE block statement : WHILE expression blockstatement : NAME COLON types EQUALS expression SEMICOLON\n                 | NAME COLON types EQUALS QMARK STRING QMARK SEMICOLONstatement : NAME EQUALS expression SEMICOLON\n                 | NAME EQUALS QMARK STRING QMARK SEMICOLONstatement : expressionexpression : expression SUM expression\n                  | expression SUB expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression RESTOF expression\n                  | expression SAMEAS expression\n                  | expression NEQUAL expression\n                  | expression HEQUAL expression\n                  | expression LEQUAL expression\n                  | expression HIGHER expression\n                  | expression LOWER expression \n                  | expression AND expression\n                  | expression OR expressionexpression : TRUE \n                | FALSEexpression : DIFFER expressionexpression : NUMBERexpression : FLOATexpression : STRINGexpression : NAMEexpression : NAME LBRACK expression RBRACKexpression :  NAME LPAR RPAR LBRACK expression RBRACK\n                    | NAME LPAR argument RPAR LBRACK expression RBRACK expression : NAME LPAR argument RPARargument :   expression\n                  | expression COMMA expression '
    
_lr_action_items = {'DECLARATION':([0,4,6,23,24,25,26,28,29,34,35,38,40,42,43,44,58,],[2,2,2,-5,-6,-7,-8,-11,-12,-9,-10,-14,-15,-13,-16,-19,-20,]),'DEFINITION':([0,4,6,23,24,25,26,28,29,34,35,38,40,42,43,44,58,],[3,3,3,-5,-6,-7,-8,-11,-12,-9,-10,-14,-15,-13,-16,-19,-20,]),'$end':([1,4,6,8,10,23,24,25,26,28,29,34,35,38,40,42,43,44,58,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-11,-12,-9,-10,-14,-15,-13,-16,-19,-20,]),'NAME':([2,3,9,11,33,39,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,110,111,112,113,114,120,121,123,124,127,128,],[5,7,12,12,12,51,-19,51,62,-32,62,62,-52,-51,-46,-47,62,-49,-50,-20,-23,-52,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,62,-30,-53,62,62,-56,-26,62,-28,-31,-54,-55,-29,]),'LPAR':([5,7,51,62,],[9,11,81,81,]),'RPAR':([9,11,13,15,22,23,24,25,26,41,52,53,54,56,57,62,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,104,105,110,113,119,124,127,],[14,16,18,20,-17,-5,-6,-7,-8,-18,-51,-46,-47,-49,-50,-52,103,-48,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,113,-53,-56,-58,-54,-55,]),'COLON':([12,14,16,18,20,51,],[17,19,21,27,30,78,]),'INT':([17,19,21,27,30,78,],[23,23,23,23,23,23,]),'FLOATTYPE':([17,19,21,27,30,78,],[24,24,24,24,24,24,]),'BOOL':([17,19,21,27,30,78,],[25,25,25,25,25,25,]),'STRINGTYPE':([17,19,21,27,30,78,],[26,26,26,26,26,26,]),'VOID':([19,21,27,30,],[29,32,35,37,]),'COMMA':([22,23,24,25,26,52,53,54,56,57,62,82,84,85,86,87,88,89,90,91,92,93,94,95,96,104,110,113,124,127,],[33,-5,-6,-7,-8,-51,-46,-47,-49,-50,-52,-48,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,112,-53,-56,-54,-55,]),'LCURLY':([23,24,25,26,31,32,36,37,52,53,54,56,57,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,106,110,113,124,127,],[-5,-6,-7,-8,39,39,39,39,-51,-46,-47,-49,-50,-52,39,39,-48,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,39,-53,-56,-54,-55,]),'EQUALS':([23,24,25,26,51,99,],[-5,-6,-7,-8,79,107,]),'RCURLY':([39,44,45,46,48,51,52,53,54,56,57,58,59,60,62,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,108,110,113,114,121,123,124,127,128,],[44,-19,58,-21,-32,-52,-51,-46,-47,-49,-50,-20,-22,-23,-52,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,-30,-53,-56,-26,-28,-31,-54,-55,-29,]),'RETURN':([39,44,46,48,51,52,53,54,56,57,58,60,62,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,108,110,113,114,121,123,124,127,128,],[47,-19,47,-32,-52,-51,-46,-47,-49,-50,-20,-23,-52,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,-30,-53,-56,-26,-28,-31,-54,-55,-29,]),'IF':([39,44,46,48,51,52,53,54,56,57,58,60,62,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,108,110,113,114,121,123,124,127,128,],[49,-19,49,-32,-52,-51,-46,-47,-49,-50,-20,-23,-52,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,-30,-53,-56,-26,-28,-31,-54,-55,-29,]),'WHILE':([39,44,46,48,51,52,53,54,56,57,58,60,62,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,108,110,113,114,121,123,124,127,128,],[50,-19,50,-32,-52,-51,-46,-47,-49,-50,-20,-23,-52,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,-30,-53,-56,-26,-28,-31,-54,-55,-29,]),'TRUE':([39,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,110,111,112,113,114,120,121,123,124,127,128,],[53,-19,53,53,-32,53,53,-52,-51,-46,-47,53,-49,-50,-20,-23,-52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,53,-30,-53,53,53,-56,-26,53,-28,-31,-54,-55,-29,]),'FALSE':([39,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,110,111,112,113,114,120,121,123,124,127,128,],[54,-19,54,54,-32,54,54,-52,-51,-46,-47,54,-49,-50,-20,-23,-52,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,54,-30,-53,54,54,-56,-26,54,-28,-31,-54,-55,-29,]),'DIFFER':([39,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,110,111,112,113,114,120,121,123,124,127,128,],[55,-19,55,55,-32,55,55,-52,-51,-46,-47,55,-49,-50,-20,-23,-52,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,55,-30,-53,55,55,-56,-26,55,-28,-31,-54,-55,-29,]),'NUMBER':([39,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,110,111,112,113,114,120,121,123,124,127,128,],[56,-19,56,56,-32,56,56,-52,-51,-46,-47,56,-49,-50,-20,-23,-52,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,56,-30,-53,56,56,-56,-26,56,-28,-31,-54,-55,-29,]),'FLOAT':([39,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,110,111,112,113,114,120,121,123,124,127,128,],[57,-19,57,57,-32,57,57,-52,-51,-46,-47,57,-49,-50,-20,-23,-52,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,57,-30,-53,57,57,-56,-26,57,-28,-31,-54,-55,-29,]),'STRING':([39,44,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,107,108,110,111,112,113,114,116,120,121,123,124,127,128,],[52,-19,52,52,-32,52,52,-52,-51,-46,-47,52,-49,-50,-20,-23,-52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-48,-24,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-25,-27,109,52,-30,-53,52,52,-56,-26,122,52,-28,-31,-54,-55,-29,]),'ELSE':([44,58,97,],[-19,-20,106,]),'SEMICOLON':([47,52,53,54,56,57,61,62,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,110,113,115,117,124,126,127,],[60,-51,-46,-47,-49,-50,83,-52,-48,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,108,-53,-56,121,123,-54,128,-55,]),'SUM':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[63,-52,-51,-46,-47,-49,-50,63,-52,63,63,63,-33,-34,-35,-36,-37,63,63,63,63,63,63,63,63,63,63,63,-53,-56,63,63,63,-54,63,-55,]),'SUB':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[64,-52,-51,-46,-47,-49,-50,64,-52,64,64,64,-33,-34,-35,-36,-37,64,64,64,64,64,64,64,64,64,64,64,-53,-56,64,64,64,-54,64,-55,]),'MULTIPLY':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[65,-52,-51,-46,-47,-49,-50,65,-52,65,65,65,65,65,-35,-36,-37,65,65,65,65,65,65,65,65,65,65,65,-53,-56,65,65,65,-54,65,-55,]),'DIVIDE':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[66,-52,-51,-46,-47,-49,-50,66,-52,66,66,66,66,66,-35,-36,-37,66,66,66,66,66,66,66,66,66,66,66,-53,-56,66,66,66,-54,66,-55,]),'RESTOF':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[67,-52,-51,-46,-47,-49,-50,67,-52,67,67,67,67,67,-35,-36,-37,67,67,67,67,67,67,67,67,67,67,67,-53,-56,67,67,67,-54,67,-55,]),'SAMEAS':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[68,-52,-51,-46,-47,-49,-50,68,-52,68,68,None,-33,-34,-35,-36,-37,None,None,None,None,None,None,68,68,68,68,68,-53,-56,68,68,68,-54,68,-55,]),'NEQUAL':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[69,-52,-51,-46,-47,-49,-50,69,-52,69,69,None,-33,-34,-35,-36,-37,None,None,None,None,None,None,69,69,69,69,69,-53,-56,69,69,69,-54,69,-55,]),'HEQUAL':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[70,-52,-51,-46,-47,-49,-50,70,-52,70,70,None,-33,-34,-35,-36,-37,None,None,None,None,None,None,70,70,70,70,70,-53,-56,70,70,70,-54,70,-55,]),'LEQUAL':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[71,-52,-51,-46,-47,-49,-50,71,-52,71,71,None,-33,-34,-35,-36,-37,None,None,None,None,None,None,71,71,71,71,71,-53,-56,71,71,71,-54,71,-55,]),'HIGHER':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[72,-52,-51,-46,-47,-49,-50,72,-52,72,72,None,-33,-34,-35,-36,-37,None,None,None,None,None,None,72,72,72,72,72,-53,-56,72,72,72,-54,72,-55,]),'LOWER':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[73,-52,-51,-46,-47,-49,-50,73,-52,73,73,None,-33,-34,-35,-36,-37,None,None,None,None,None,None,73,73,73,73,73,-53,-56,73,73,73,-54,73,-55,]),'AND':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[74,-52,-51,-46,-47,-49,-50,74,-52,74,74,-48,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,74,74,74,-53,-56,74,74,74,-54,74,-55,]),'OR':([48,51,52,53,54,56,57,61,62,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,110,113,115,118,119,124,125,127,],[75,-52,-51,-46,-47,-49,-50,75,-52,75,75,-48,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,75,75,75,-53,-56,75,75,75,-54,75,-55,]),'LBRACK':([51,62,103,113,],[80,80,111,120,]),'RBRACK':([52,53,54,56,57,62,82,84,85,86,87,88,89,90,91,92,93,94,95,96,102,110,113,118,124,125,127,],[-51,-46,-47,-49,-50,-52,-48,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,110,-53,-56,124,-54,127,-55,]),'QMARK':([79,107,109,122,],[101,116,117,126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,4,6,],[1,8,10,]),'declaration':([2,],[4,]),'definition':([3,],[6,]),'dargument':([9,11,33,],[13,15,41,]),'types':([17,19,21,27,30,78,],[22,28,31,34,36,99,]),'block':([31,32,36,37,76,77,106,],[38,40,42,43,97,98,114,]),'block_content':([39,46,],[45,59,]),'statement':([39,46,],[46,46,]),'expression':([39,46,47,49,50,55,63,64,65,66,67,68,69,70,71,72,73,74,75,79,80,81,107,111,112,120,],[48,48,61,76,77,82,84,85,86,87,88,89,90,91,92,93,94,95,96,100,102,104,115,118,119,125,]),'argument':([81,],[105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> DECLARATION declaration','program',2,'p_program','casual.py',157),
  ('program -> DEFINITION definition','program',2,'p_program','casual.py',158),
  ('program -> DECLARATION declaration program','program',3,'p_program','casual.py',159),
  ('program -> DEFINITION definition program','program',3,'p_program','casual.py',160),
  ('types -> INT','types',1,'p_types','casual.py',163),
  ('types -> FLOATTYPE','types',1,'p_types','casual.py',164),
  ('types -> BOOL','types',1,'p_types','casual.py',165),
  ('types -> STRINGTYPE','types',1,'p_types','casual.py',166),
  ('declaration -> NAME LPAR dargument RPAR COLON types','declaration',6,'p_declaration','casual.py',169),
  ('declaration -> NAME LPAR dargument RPAR COLON VOID','declaration',6,'p_declaration','casual.py',170),
  ('declaration -> NAME LPAR RPAR COLON types','declaration',5,'p_declaration','casual.py',171),
  ('declaration -> NAME LPAR RPAR COLON VOID','declaration',5,'p_declaration','casual.py',172),
  ('definition -> NAME LPAR dargument RPAR COLON types block','definition',7,'p_definition','casual.py',175),
  ('definition -> NAME LPAR RPAR COLON types block','definition',6,'p_definition','casual.py',176),
  ('definition -> NAME LPAR RPAR COLON VOID block','definition',6,'p_definition','casual.py',177),
  ('definition -> NAME LPAR dargument RPAR COLON VOID block','definition',7,'p_definition','casual.py',178),
  ('dargument -> NAME COLON types','dargument',3,'p_d_argument','casual.py',181),
  ('dargument -> NAME COLON types COMMA dargument','dargument',5,'p_d_argument','casual.py',182),
  ('block -> LCURLY RCURLY','block',2,'p_block','casual.py',188),
  ('block -> LCURLY block_content RCURLY','block',3,'p_block','casual.py',189),
  ('block_content -> statement','block_content',1,'p_block_content','casual.py',192),
  ('block_content -> statement block_content','block_content',2,'p_block_content','casual.py',193),
  ('statement -> RETURN SEMICOLON','statement',2,'p_return_statement','casual.py',196),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_return_statement','casual.py',197),
  ('statement -> IF expression block','statement',3,'p_ifelse_statement','casual.py',200),
  ('statement -> IF expression block ELSE block','statement',5,'p_ifelse_statement','casual.py',201),
  ('statement -> WHILE expression block','statement',3,'p_while_statement','casual.py',204),
  ('statement -> NAME COLON types EQUALS expression SEMICOLON','statement',6,'p_var_decl_statment','casual.py',207),
  ('statement -> NAME COLON types EQUALS QMARK STRING QMARK SEMICOLON','statement',8,'p_var_decl_statment','casual.py',208),
  ('statement -> NAME EQUALS expression SEMICOLON','statement',4,'p_var_assign_statment','casual.py',211),
  ('statement -> NAME EQUALS QMARK STRING QMARK SEMICOLON','statement',6,'p_var_assign_statment','casual.py',212),
  ('statement -> expression','statement',1,'p_statement_expr','casual.py',217),
  ('expression -> expression SUM expression','expression',3,'p_expression_binop','casual.py',220),
  ('expression -> expression SUB expression','expression',3,'p_expression_binop','casual.py',221),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','casual.py',222),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','casual.py',223),
  ('expression -> expression RESTOF expression','expression',3,'p_expression_binop','casual.py',224),
  ('expression -> expression SAMEAS expression','expression',3,'p_expression_binop','casual.py',225),
  ('expression -> expression NEQUAL expression','expression',3,'p_expression_binop','casual.py',226),
  ('expression -> expression HEQUAL expression','expression',3,'p_expression_binop','casual.py',227),
  ('expression -> expression LEQUAL expression','expression',3,'p_expression_binop','casual.py',228),
  ('expression -> expression HIGHER expression','expression',3,'p_expression_binop','casual.py',229),
  ('expression -> expression LOWER expression','expression',3,'p_expression_binop','casual.py',230),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','casual.py',231),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','casual.py',232),
  ('expression -> TRUE','expression',1,'p_expression_bool','casual.py',235),
  ('expression -> FALSE','expression',1,'p_expression_bool','casual.py',236),
  ('expression -> DIFFER expression','expression',2,'p_expression_nuo','casual.py',239),
  ('expression -> NUMBER','expression',1,'p_expression_int','casual.py',242),
  ('expression -> FLOAT','expression',1,'p_expression_float','casual.py',245),
  ('expression -> STRING','expression',1,'p_expression_string','casual.py',248),
  ('expression -> NAME','expression',1,'p_expression_name','casual.py',251),
  ('expression -> NAME LBRACK expression RBRACK','expression',4,'p_expression_index','casual.py',254),
  ('expression -> NAME LPAR RPAR LBRACK expression RBRACK','expression',6,'p_expression_index_fun','casual.py',257),
  ('expression -> NAME LPAR argument RPAR LBRACK expression RBRACK','expression',7,'p_expression_index_fun','casual.py',258),
  ('expression -> NAME LPAR argument RPAR','expression',4,'p_expression_fun_invoc','casual.py',261),
  ('argument -> expression','argument',1,'p_argument','casual.py',264),
  ('argument -> expression COMMA expression','argument',3,'p_argument','casual.py',265),
]
